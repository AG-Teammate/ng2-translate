"use strict";
var translate_parser_1 = require('../src/translate.parser');
describe('Parser', function () {
    var parser;
    beforeEach(function () {
        parser = new translate_parser_1.Parser();
    });
    it('is defined', function () {
        expect(translate_parser_1.Parser).toBeDefined();
        expect(parser instanceof translate_parser_1.Parser).toBeTruthy();
    });
    it('should interpolate', function () {
        expect(parser.interpolate("This is a {{ key }}", { key: "value" })).toEqual("This is a value");
    });
    it('should interpolate with falsy values', function () {
        expect(parser.interpolate("This is a {{ key }}", { key: "" })).toEqual("This is a ");
        expect(parser.interpolate("This is a {{ key }}", { key: 0 })).toEqual("This is a 0");
        expect(parser.interpolate("This is a {{ key }}", { key: null })).toEqual("This is a null");
    });
    it('should interpolate with object properties', function () {
        expect(parser.interpolate("This is a {{ key1.key2 }}", { key1: { key2: "value2" } })).toEqual("This is a value2");
        expect(parser.interpolate("This is a {{ key1.key2.key3 }}", { key1: { key2: { key3: "value3" } } })).toEqual("This is a value3");
    });
    it('should get the addressed value', function () {
        expect(parser.getValue({ key1: { key2: "value2" } }, 'key1.key2')).toEqual("value2");
        expect(parser.getValue({ key1: { key2: "value" } }, 'keyWrong.key2')).not.toBeDefined();
        expect(parser.getValue({ key1: { key2: { key3: "value3" } } }, 'key1.key2.key3')).toEqual("value3");
        expect(parser.getValue({ key1: { key2: { key3: "value3" } } }, 'key1.keyWrong.key3')).not.toBeDefined();
        expect(parser.getValue({ key1: { key2: { key3: "value3" } } }, 'key1.key2.keyWrong')).not.toBeDefined();
        expect(parser.getValue({ 'key1.key2': { key3: "value3" } }, 'key1.key2.key3')).toEqual("value3");
        expect(parser.getValue({ key1: { 'key2.key3': "value3" } }, 'key1.key2.key3')).toEqual("value3");
        expect(parser.getValue({ 'key1.key2.key3': "value3" }, 'key1.key2.key3')).toEqual("value3");
        expect(parser.getValue({ 'key1.key2': { key3: "value3" } }, 'key1.key2.keyWrong')).not.toBeDefined();
        expect(parser.getValue({
            'key1': "value1",
            'key1.key2': "value2"
        }, 'key1.key2')).toEqual("value2");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBhcnNlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJhbnNsYXRlLnBhcnNlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQ0FBcUIseUJBQXlCLENBQUMsQ0FBQTtBQUUvQyxRQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2YsSUFBSSxNQUFjLENBQUM7SUFFbkIsVUFBVSxDQUFDO1FBQ1AsTUFBTSxHQUFHLElBQUkseUJBQU0sRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLFlBQVksRUFBRTtRQUNiLE1BQU0sQ0FBQyx5QkFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFN0IsTUFBTSxDQUFDLE1BQU0sWUFBWSx5QkFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0JBQW9CLEVBQUU7UUFDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsRUFBQyxHQUFHLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pHLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNDQUFzQyxFQUFFO1FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbkYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsRUFBQyxHQUFHLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRixNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDN0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUU7UUFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsMkJBQTJCLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZ0NBQWdDLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUMvSCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsRUFBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQyxFQUFDLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsRUFBQyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsRUFBQyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsRUFBQyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFHbEcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdGLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxFQUFFLEVBQUMsV0FBVyxFQUFFLFFBQVEsRUFBQyxFQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFDLGdCQUFnQixFQUFFLFFBQVEsRUFBQyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ25CLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFdBQVcsRUFBRSxRQUFRO1NBQ3hCLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdkMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGFyc2VyfSBmcm9tICcuLi9zcmMvdHJhbnNsYXRlLnBhcnNlcic7XHJcblxyXG5kZXNjcmliZSgnUGFyc2VyJywgKCkgPT4ge1xyXG4gICAgbGV0IHBhcnNlcjogUGFyc2VyO1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdpcyBkZWZpbmVkJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChQYXJzZXIpLnRvQmVEZWZpbmVkKCk7XHJcblxyXG4gICAgICAgIGV4cGVjdChwYXJzZXIgaW5zdGFuY2VvZiBQYXJzZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaW50ZXJwb2xhdGUnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5pbnRlcnBvbGF0ZShcIlRoaXMgaXMgYSB7eyBrZXkgfX1cIiwge2tleTogXCJ2YWx1ZVwifSkpLnRvRXF1YWwoXCJUaGlzIGlzIGEgdmFsdWVcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGludGVycG9sYXRlIHdpdGggZmFsc3kgdmFsdWVzJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChwYXJzZXIuaW50ZXJwb2xhdGUoXCJUaGlzIGlzIGEge3sga2V5IH19XCIsIHtrZXk6IFwiXCJ9KSkudG9FcXVhbChcIlRoaXMgaXMgYSBcIik7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5pbnRlcnBvbGF0ZShcIlRoaXMgaXMgYSB7eyBrZXkgfX1cIiwge2tleTogMH0pKS50b0VxdWFsKFwiVGhpcyBpcyBhIDBcIik7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5pbnRlcnBvbGF0ZShcIlRoaXMgaXMgYSB7eyBrZXkgfX1cIiwge2tleTogbnVsbH0pKS50b0VxdWFsKFwiVGhpcyBpcyBhIG51bGxcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGludGVycG9sYXRlIHdpdGggb2JqZWN0IHByb3BlcnRpZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5pbnRlcnBvbGF0ZShcIlRoaXMgaXMgYSB7eyBrZXkxLmtleTIgfX1cIiwge2tleTE6IHtrZXkyOiBcInZhbHVlMlwifX0pKS50b0VxdWFsKFwiVGhpcyBpcyBhIHZhbHVlMlwiKTtcclxuICAgICAgICBleHBlY3QocGFyc2VyLmludGVycG9sYXRlKFwiVGhpcyBpcyBhIHt7IGtleTEua2V5Mi5rZXkzIH19XCIsIHtrZXkxOiB7a2V5Mjoge2tleTM6IFwidmFsdWUzXCJ9fX0pKS50b0VxdWFsKFwiVGhpcyBpcyBhIHZhbHVlM1wiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgZ2V0IHRoZSBhZGRyZXNzZWQgdmFsdWUnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5nZXRWYWx1ZSh7a2V5MToge2tleTI6IFwidmFsdWUyXCJ9fSwgJ2tleTEua2V5MicpKS50b0VxdWFsKFwidmFsdWUyXCIpO1xyXG4gICAgICAgIGV4cGVjdChwYXJzZXIuZ2V0VmFsdWUoe2tleTE6IHtrZXkyOiBcInZhbHVlXCJ9fSwgJ2tleVdyb25nLmtleTInKSkubm90LnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5nZXRWYWx1ZSh7a2V5MToge2tleTI6IHtrZXkzOiBcInZhbHVlM1wifX19LCAna2V5MS5rZXkyLmtleTMnKSkudG9FcXVhbChcInZhbHVlM1wiKTtcclxuICAgICAgICBleHBlY3QocGFyc2VyLmdldFZhbHVlKHtrZXkxOiB7a2V5Mjoge2tleTM6IFwidmFsdWUzXCJ9fX0sICdrZXkxLmtleVdyb25nLmtleTMnKSkubm90LnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5nZXRWYWx1ZSh7a2V5MToge2tleTI6IHtrZXkzOiBcInZhbHVlM1wifX19LCAna2V5MS5rZXkyLmtleVdyb25nJykpLm5vdC50b0JlRGVmaW5lZCgpO1xyXG5cclxuXHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5nZXRWYWx1ZSh7J2tleTEua2V5Mic6IHtrZXkzOiBcInZhbHVlM1wifX0sICdrZXkxLmtleTIua2V5MycpKS50b0VxdWFsKFwidmFsdWUzXCIpO1xyXG4gICAgICAgIGV4cGVjdChwYXJzZXIuZ2V0VmFsdWUoe2tleTE6IHsna2V5Mi5rZXkzJzogXCJ2YWx1ZTNcIn19LCAna2V5MS5rZXkyLmtleTMnKSkudG9FcXVhbChcInZhbHVlM1wiKTtcclxuICAgICAgICBleHBlY3QocGFyc2VyLmdldFZhbHVlKHsna2V5MS5rZXkyLmtleTMnOiBcInZhbHVlM1wifSwgJ2tleTEua2V5Mi5rZXkzJykpLnRvRXF1YWwoXCJ2YWx1ZTNcIik7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5nZXRWYWx1ZSh7J2tleTEua2V5Mic6IHtrZXkzOiBcInZhbHVlM1wifX0sICdrZXkxLmtleTIua2V5V3JvbmcnKSkubm90LnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlci5nZXRWYWx1ZSh7XHJcbiAgICAgICAgICAgICdrZXkxJzogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgJ2tleTEua2V5Mic6IFwidmFsdWUyXCJcclxuICAgICAgICB9LCAna2V5MS5rZXkyJykpLnRvRXF1YWwoXCJ2YWx1ZTJcIik7XHJcblxyXG4gICAgfSk7XHJcbn0pO1xyXG4iXX0=